// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	helpers "lineblocs.com/api/helpers"
)

// CarrierStoreInterface is an autogenerated mock type for the CarrierStoreInterface type
type CarrierStoreInterface struct {
	mock.Mock
}

type CarrierStoreInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *CarrierStoreInterface) EXPECT() *CarrierStoreInterface_Expecter {
	return &CarrierStoreInterface_Expecter{mock: &_m.Mock}
}

// CreateRoutingFlow provides a mock function with given fields: _a0, _a1, _a2
func (_m *CarrierStoreInterface) CreateRoutingFlow(_a0 *string, _a1 *string, _a2 *string) (*helpers.Flow, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *helpers.Flow
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, *string, *string) (*helpers.Flow, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(*string, *string, *string) *helpers.Flow); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helpers.Flow)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, *string, *string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CarrierStoreInterface_CreateRoutingFlow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRoutingFlow'
type CarrierStoreInterface_CreateRoutingFlow_Call struct {
	*mock.Call
}

// CreateRoutingFlow is a helper method to define mock.On call
//   - _a0 *string
//   - _a1 *string
//   - _a2 *string
func (_e *CarrierStoreInterface_Expecter) CreateRoutingFlow(_a0 interface{}, _a1 interface{}, _a2 interface{}) *CarrierStoreInterface_CreateRoutingFlow_Call {
	return &CarrierStoreInterface_CreateRoutingFlow_Call{Call: _e.mock.On("CreateRoutingFlow", _a0, _a1, _a2)}
}

func (_c *CarrierStoreInterface_CreateRoutingFlow_Call) Run(run func(_a0 *string, _a1 *string, _a2 *string)) *CarrierStoreInterface_CreateRoutingFlow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string), args[1].(*string), args[2].(*string))
	})
	return _c
}

func (_c *CarrierStoreInterface_CreateRoutingFlow_Call) Return(_a0 *helpers.Flow, _a1 error) *CarrierStoreInterface_CreateRoutingFlow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CarrierStoreInterface_CreateRoutingFlow_Call) RunAndReturn(run func(*string, *string, *string) (*helpers.Flow, error)) *CarrierStoreInterface_CreateRoutingFlow_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSIPReport provides a mock function with given fields: _a0, _a1
func (_m *CarrierStoreInterface) CreateSIPReport(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CarrierStoreInterface_CreateSIPReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSIPReport'
type CarrierStoreInterface_CreateSIPReport_Call struct {
	*mock.Call
}

// CreateSIPReport is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
func (_e *CarrierStoreInterface_Expecter) CreateSIPReport(_a0 interface{}, _a1 interface{}) *CarrierStoreInterface_CreateSIPReport_Call {
	return &CarrierStoreInterface_CreateSIPReport_Call{Call: _e.mock.On("CreateSIPReport", _a0, _a1)}
}

func (_c *CarrierStoreInterface_CreateSIPReport_Call) Run(run func(_a0 string, _a1 string)) *CarrierStoreInterface_CreateSIPReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *CarrierStoreInterface_CreateSIPReport_Call) Return(_a0 error) *CarrierStoreInterface_CreateSIPReport_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CarrierStoreInterface_CreateSIPReport_Call) RunAndReturn(run func(string, string) error) *CarrierStoreInterface_CreateSIPReport_Call {
	_c.Call.Return(run)
	return _c
}

// StartProcessingFlow provides a mock function with given fields: _a0, _a1
func (_m *CarrierStoreInterface) StartProcessingFlow(_a0 *helpers.Flow, _a1 map[string]string) ([]*helpers.RoutablePSTNProvider, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*helpers.RoutablePSTNProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(*helpers.Flow, map[string]string) ([]*helpers.RoutablePSTNProvider, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*helpers.Flow, map[string]string) []*helpers.RoutablePSTNProvider); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*helpers.RoutablePSTNProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(*helpers.Flow, map[string]string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CarrierStoreInterface_StartProcessingFlow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartProcessingFlow'
type CarrierStoreInterface_StartProcessingFlow_Call struct {
	*mock.Call
}

// StartProcessingFlow is a helper method to define mock.On call
//   - _a0 *helpers.Flow
//   - _a1 map[string]string
func (_e *CarrierStoreInterface_Expecter) StartProcessingFlow(_a0 interface{}, _a1 interface{}) *CarrierStoreInterface_StartProcessingFlow_Call {
	return &CarrierStoreInterface_StartProcessingFlow_Call{Call: _e.mock.On("StartProcessingFlow", _a0, _a1)}
}

func (_c *CarrierStoreInterface_StartProcessingFlow_Call) Run(run func(_a0 *helpers.Flow, _a1 map[string]string)) *CarrierStoreInterface_StartProcessingFlow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*helpers.Flow), args[1].(map[string]string))
	})
	return _c
}

func (_c *CarrierStoreInterface_StartProcessingFlow_Call) Return(_a0 []*helpers.RoutablePSTNProvider, _a1 error) *CarrierStoreInterface_StartProcessingFlow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CarrierStoreInterface_StartProcessingFlow_Call) RunAndReturn(run func(*helpers.Flow, map[string]string) ([]*helpers.RoutablePSTNProvider, error)) *CarrierStoreInterface_StartProcessingFlow_Call {
	_c.Call.Return(run)
	return _c
}

// NewCarrierStoreInterface creates a new instance of CarrierStoreInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCarrierStoreInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CarrierStoreInterface {
	mock := &CarrierStoreInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
