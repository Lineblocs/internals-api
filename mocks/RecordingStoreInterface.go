// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "lineblocs.com/api/model"
)

// RecordingStoreInterface is an autogenerated mock type for the RecordingStoreInterface type
type RecordingStoreInterface struct {
	mock.Mock
}

type RecordingStoreInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *RecordingStoreInterface) EXPECT() *RecordingStoreInterface_Expecter {
	return &RecordingStoreInterface_Expecter{mock: &_m.Mock}
}

// CreateRecording provides a mock function with given fields: _a0, _a1
func (_m *RecordingStoreInterface) CreateRecording(_a0 *model.Workspace, _a1 *model.Recording) (int64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Workspace, *model.Recording) (int64, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*model.Workspace, *model.Recording) int64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*model.Workspace, *model.Recording) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecordingStoreInterface_CreateRecording_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRecording'
type RecordingStoreInterface_CreateRecording_Call struct {
	*mock.Call
}

// CreateRecording is a helper method to define mock.On call
//   - _a0 *model.Workspace
//   - _a1 *model.Recording
func (_e *RecordingStoreInterface_Expecter) CreateRecording(_a0 interface{}, _a1 interface{}) *RecordingStoreInterface_CreateRecording_Call {
	return &RecordingStoreInterface_CreateRecording_Call{Call: _e.mock.On("CreateRecording", _a0, _a1)}
}

func (_c *RecordingStoreInterface_CreateRecording_Call) Run(run func(_a0 *model.Workspace, _a1 *model.Recording)) *RecordingStoreInterface_CreateRecording_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Workspace), args[1].(*model.Recording))
	})
	return _c
}

func (_c *RecordingStoreInterface_CreateRecording_Call) Return(_a0 int64, _a1 error) *RecordingStoreInterface_CreateRecording_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RecordingStoreInterface_CreateRecording_Call) RunAndReturn(run func(*model.Workspace, *model.Recording) (int64, error)) *RecordingStoreInterface_CreateRecording_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecordingFromDB provides a mock function with given fields: _a0
func (_m *RecordingStoreInterface) GetRecordingFromDB(_a0 int) (*model.Recording, error) {
	ret := _m.Called(_a0)

	var r0 *model.Recording
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*model.Recording, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) *model.Recording); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Recording)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecordingStoreInterface_GetRecordingFromDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecordingFromDB'
type RecordingStoreInterface_GetRecordingFromDB_Call struct {
	*mock.Call
}

// GetRecordingFromDB is a helper method to define mock.On call
//   - _a0 int
func (_e *RecordingStoreInterface_Expecter) GetRecordingFromDB(_a0 interface{}) *RecordingStoreInterface_GetRecordingFromDB_Call {
	return &RecordingStoreInterface_GetRecordingFromDB_Call{Call: _e.mock.On("GetRecordingFromDB", _a0)}
}

func (_c *RecordingStoreInterface_GetRecordingFromDB_Call) Run(run func(_a0 int)) *RecordingStoreInterface_GetRecordingFromDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *RecordingStoreInterface_GetRecordingFromDB_Call) Return(_a0 *model.Recording, _a1 error) *RecordingStoreInterface_GetRecordingFromDB_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RecordingStoreInterface_GetRecordingFromDB_Call) RunAndReturn(run func(int) (*model.Recording, error)) *RecordingStoreInterface_GetRecordingFromDB_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecordingSpace provides a mock function with given fields: _a0
func (_m *RecordingStoreInterface) GetRecordingSpace(_a0 int) (int, error) {
	ret := _m.Called(_a0)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecordingStoreInterface_GetRecordingSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecordingSpace'
type RecordingStoreInterface_GetRecordingSpace_Call struct {
	*mock.Call
}

// GetRecordingSpace is a helper method to define mock.On call
//   - _a0 int
func (_e *RecordingStoreInterface_Expecter) GetRecordingSpace(_a0 interface{}) *RecordingStoreInterface_GetRecordingSpace_Call {
	return &RecordingStoreInterface_GetRecordingSpace_Call{Call: _e.mock.On("GetRecordingSpace", _a0)}
}

func (_c *RecordingStoreInterface_GetRecordingSpace_Call) Run(run func(_a0 int)) *RecordingStoreInterface_GetRecordingSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *RecordingStoreInterface_GetRecordingSpace_Call) Return(_a0 int, _a1 error) *RecordingStoreInterface_GetRecordingSpace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RecordingStoreInterface_GetRecordingSpace_Call) RunAndReturn(run func(int) (int, error)) *RecordingStoreInterface_GetRecordingSpace_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRecording provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *RecordingStoreInterface) UpdateRecording(_a0 string, _a1 string, _a2 int64, _a3 int) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int64, int) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecordingStoreInterface_UpdateRecording_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRecording'
type RecordingStoreInterface_UpdateRecording_Call struct {
	*mock.Call
}

// UpdateRecording is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
//   - _a2 int64
//   - _a3 int
func (_e *RecordingStoreInterface_Expecter) UpdateRecording(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *RecordingStoreInterface_UpdateRecording_Call {
	return &RecordingStoreInterface_UpdateRecording_Call{Call: _e.mock.On("UpdateRecording", _a0, _a1, _a2, _a3)}
}

func (_c *RecordingStoreInterface_UpdateRecording_Call) Run(run func(_a0 string, _a1 string, _a2 int64, _a3 int)) *RecordingStoreInterface_UpdateRecording_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int64), args[3].(int))
	})
	return _c
}

func (_c *RecordingStoreInterface_UpdateRecording_Call) Return(_a0 error) *RecordingStoreInterface_UpdateRecording_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RecordingStoreInterface_UpdateRecording_Call) RunAndReturn(run func(string, string, int64, int) error) *RecordingStoreInterface_UpdateRecording_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRecordingTranscription provides a mock function with given fields: _a0
func (_m *RecordingStoreInterface) UpdateRecordingTranscription(_a0 *model.RecordingTranscription) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.RecordingTranscription) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecordingStoreInterface_UpdateRecordingTranscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRecordingTranscription'
type RecordingStoreInterface_UpdateRecordingTranscription_Call struct {
	*mock.Call
}

// UpdateRecordingTranscription is a helper method to define mock.On call
//   - _a0 *model.RecordingTranscription
func (_e *RecordingStoreInterface_Expecter) UpdateRecordingTranscription(_a0 interface{}) *RecordingStoreInterface_UpdateRecordingTranscription_Call {
	return &RecordingStoreInterface_UpdateRecordingTranscription_Call{Call: _e.mock.On("UpdateRecordingTranscription", _a0)}
}

func (_c *RecordingStoreInterface_UpdateRecordingTranscription_Call) Run(run func(_a0 *model.RecordingTranscription)) *RecordingStoreInterface_UpdateRecordingTranscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.RecordingTranscription))
	})
	return _c
}

func (_c *RecordingStoreInterface_UpdateRecordingTranscription_Call) Return(_a0 error) *RecordingStoreInterface_UpdateRecordingTranscription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RecordingStoreInterface_UpdateRecordingTranscription_Call) RunAndReturn(run func(*model.RecordingTranscription) error) *RecordingStoreInterface_UpdateRecordingTranscription_Call {
	_c.Call.Return(run)
	return _c
}

// NewRecordingStoreInterface creates a new instance of RecordingStoreInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecordingStoreInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RecordingStoreInterface {
	mock := &RecordingStoreInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
