// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	helpers "lineblocs.com/api/helpers"
)

// BaseManager is an autogenerated mock type for the BaseManager type
type BaseManager struct {
	mock.Mock
}

type BaseManager_Expecter struct {
	mock *mock.Mock
}

func (_m *BaseManager) EXPECT() *BaseManager_Expecter {
	return &BaseManager_Expecter{mock: &_m.Mock}
}

// Process provides a mock function with given fields:
func (_m *BaseManager) Process() (*helpers.FlowResponse, error) {
	ret := _m.Called()

	var r0 *helpers.FlowResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*helpers.FlowResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *helpers.FlowResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helpers.FlowResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BaseManager_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type BaseManager_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
func (_e *BaseManager_Expecter) Process() *BaseManager_Process_Call {
	return &BaseManager_Process_Call{Call: _e.mock.On("Process")}
}

func (_c *BaseManager_Process_Call) Run(run func()) *BaseManager_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BaseManager_Process_Call) Return(_a0 *helpers.FlowResponse, _a1 error) *BaseManager_Process_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BaseManager_Process_Call) RunAndReturn(run func() (*helpers.FlowResponse, error)) *BaseManager_Process_Call {
	_c.Call.Return(run)
	return _c
}

// NewBaseManager creates a new instance of BaseManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBaseManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *BaseManager {
	mock := &BaseManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
