// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "lineblocs.com/api/model"
)

// CallStore is an autogenerated mock type for the CallStore type
type CallStore struct {
	mock.Mock
}

type CallStore_Expecter struct {
	mock *mock.Mock
}

func (_m *CallStore) EXPECT() *CallStore_Expecter {
	return &CallStore_Expecter{mock: &_m.Mock}
}

// CheckIsMakingOutboundCallFirstTime provides a mock function with given fields: _a0
func (_m *CallStore) CheckIsMakingOutboundCallFirstTime(_a0 model.Call) {
	_m.Called(_a0)
}

// CallStore_CheckIsMakingOutboundCallFirstTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckIsMakingOutboundCallFirstTime'
type CallStore_CheckIsMakingOutboundCallFirstTime_Call struct {
	*mock.Call
}

// CheckIsMakingOutboundCallFirstTime is a helper method to define mock.On call
//   - _a0 model.Call
func (_e *CallStore_Expecter) CheckIsMakingOutboundCallFirstTime(_a0 interface{}) *CallStore_CheckIsMakingOutboundCallFirstTime_Call {
	return &CallStore_CheckIsMakingOutboundCallFirstTime_Call{Call: _e.mock.On("CheckIsMakingOutboundCallFirstTime", _a0)}
}

func (_c *CallStore_CheckIsMakingOutboundCallFirstTime_Call) Run(run func(_a0 model.Call)) *CallStore_CheckIsMakingOutboundCallFirstTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.Call))
	})
	return _c
}

func (_c *CallStore_CheckIsMakingOutboundCallFirstTime_Call) Return() *CallStore_CheckIsMakingOutboundCallFirstTime_Call {
	_c.Call.Return()
	return _c
}

func (_c *CallStore_CheckIsMakingOutboundCallFirstTime_Call) RunAndReturn(run func(model.Call)) *CallStore_CheckIsMakingOutboundCallFirstTime_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCall provides a mock function with given fields: _a0
func (_m *CallStore) CreateCall(_a0 *model.Call) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Call) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*model.Call) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*model.Call) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CallStore_CreateCall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCall'
type CallStore_CreateCall_Call struct {
	*mock.Call
}

// CreateCall is a helper method to define mock.On call
//   - _a0 *model.Call
func (_e *CallStore_Expecter) CreateCall(_a0 interface{}) *CallStore_CreateCall_Call {
	return &CallStore_CreateCall_Call{Call: _e.mock.On("CreateCall", _a0)}
}

func (_c *CallStore_CreateCall_Call) Run(run func(_a0 *model.Call)) *CallStore_CreateCall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Call))
	})
	return _c
}

func (_c *CallStore_CreateCall_Call) Return(_a0 string, _a1 error) *CallStore_CreateCall_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CallStore_CreateCall_Call) RunAndReturn(run func(*model.Call) (string, error)) *CallStore_CreateCall_Call {
	_c.Call.Return(run)
	return _c
}

// CreateConference provides a mock function with given fields: _a0
func (_m *CallStore) CreateConference(_a0 *model.Conference) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Conference) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*model.Conference) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*model.Conference) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CallStore_CreateConference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConference'
type CallStore_CreateConference_Call struct {
	*mock.Call
}

// CreateConference is a helper method to define mock.On call
//   - _a0 *model.Conference
func (_e *CallStore_Expecter) CreateConference(_a0 interface{}) *CallStore_CreateConference_Call {
	return &CallStore_CreateConference_Call{Call: _e.mock.On("CreateConference", _a0)}
}

func (_c *CallStore_CreateConference_Call) Run(run func(_a0 *model.Conference)) *CallStore_CreateConference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Conference))
	})
	return _c
}

func (_c *CallStore_CreateConference_Call) Return(_a0 string, _a1 error) *CallStore_CreateConference_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CallStore_CreateConference_Call) RunAndReturn(run func(*model.Conference) (string, error)) *CallStore_CreateConference_Call {
	_c.Call.Return(run)
	return _c
}

// GetCallFromDB provides a mock function with given fields: _a0
func (_m *CallStore) GetCallFromDB(_a0 int) (*model.Call, error) {
	ret := _m.Called(_a0)

	var r0 *model.Call
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*model.Call, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) *model.Call); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Call)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CallStore_GetCallFromDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCallFromDB'
type CallStore_GetCallFromDB_Call struct {
	*mock.Call
}

// GetCallFromDB is a helper method to define mock.On call
//   - _a0 int
func (_e *CallStore_Expecter) GetCallFromDB(_a0 interface{}) *CallStore_GetCallFromDB_Call {
	return &CallStore_GetCallFromDB_Call{Call: _e.mock.On("GetCallFromDB", _a0)}
}

func (_c *CallStore_GetCallFromDB_Call) Run(run func(_a0 int)) *CallStore_GetCallFromDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *CallStore_GetCallFromDB_Call) Return(_a0 *model.Call, _a1 error) *CallStore_GetCallFromDB_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CallStore_GetCallFromDB_Call) RunAndReturn(run func(int) (*model.Call, error)) *CallStore_GetCallFromDB_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserFromDB provides a mock function with given fields: id
func (_m *CallStore) GetUserFromDB(id int) (*model.User, error) {
	ret := _m.Called(id)

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*model.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *model.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CallStore_GetUserFromDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserFromDB'
type CallStore_GetUserFromDB_Call struct {
	*mock.Call
}

// GetUserFromDB is a helper method to define mock.On call
//   - id int
func (_e *CallStore_Expecter) GetUserFromDB(id interface{}) *CallStore_GetUserFromDB_Call {
	return &CallStore_GetUserFromDB_Call{Call: _e.mock.On("GetUserFromDB", id)}
}

func (_c *CallStore_GetUserFromDB_Call) Run(run func(id int)) *CallStore_GetUserFromDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *CallStore_GetUserFromDB_Call) Return(_a0 *model.User, _a1 error) *CallStore_GetUserFromDB_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CallStore_GetUserFromDB_Call) RunAndReturn(run func(int) (*model.User, error)) *CallStore_GetUserFromDB_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceByDomain provides a mock function with given fields: _a0
func (_m *CallStore) GetWorkspaceByDomain(_a0 string) (*model.Workspace, error) {
	ret := _m.Called(_a0)

	var r0 *model.Workspace
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Workspace, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Workspace); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Workspace)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CallStore_GetWorkspaceByDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceByDomain'
type CallStore_GetWorkspaceByDomain_Call struct {
	*mock.Call
}

// GetWorkspaceByDomain is a helper method to define mock.On call
//   - _a0 string
func (_e *CallStore_Expecter) GetWorkspaceByDomain(_a0 interface{}) *CallStore_GetWorkspaceByDomain_Call {
	return &CallStore_GetWorkspaceByDomain_Call{Call: _e.mock.On("GetWorkspaceByDomain", _a0)}
}

func (_c *CallStore_GetWorkspaceByDomain_Call) Run(run func(_a0 string)) *CallStore_GetWorkspaceByDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *CallStore_GetWorkspaceByDomain_Call) Return(_a0 *model.Workspace, _a1 error) *CallStore_GetWorkspaceByDomain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CallStore_GetWorkspaceByDomain_Call) RunAndReturn(run func(string) (*model.Workspace, error)) *CallStore_GetWorkspaceByDomain_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceFromDB provides a mock function with given fields: _a0
func (_m *CallStore) GetWorkspaceFromDB(_a0 int) (*model.Workspace, error) {
	ret := _m.Called(_a0)

	var r0 *model.Workspace
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*model.Workspace, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) *model.Workspace); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Workspace)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CallStore_GetWorkspaceFromDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceFromDB'
type CallStore_GetWorkspaceFromDB_Call struct {
	*mock.Call
}

// GetWorkspaceFromDB is a helper method to define mock.On call
//   - _a0 int
func (_e *CallStore_Expecter) GetWorkspaceFromDB(_a0 interface{}) *CallStore_GetWorkspaceFromDB_Call {
	return &CallStore_GetWorkspaceFromDB_Call{Call: _e.mock.On("GetWorkspaceFromDB", _a0)}
}

func (_c *CallStore_GetWorkspaceFromDB_Call) Run(run func(_a0 int)) *CallStore_GetWorkspaceFromDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *CallStore_GetWorkspaceFromDB_Call) Return(_a0 *model.Workspace, _a1 error) *CallStore_GetWorkspaceFromDB_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CallStore_GetWorkspaceFromDB_Call) RunAndReturn(run func(int) (*model.Workspace, error)) *CallStore_GetWorkspaceFromDB_Call {
	_c.Call.Return(run)
	return _c
}

// SetProviderByIP provides a mock function with given fields: _a0, _a1
func (_m *CallStore) SetProviderByIP(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CallStore_SetProviderByIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetProviderByIP'
type CallStore_SetProviderByIP_Call struct {
	*mock.Call
}

// SetProviderByIP is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
func (_e *CallStore_Expecter) SetProviderByIP(_a0 interface{}, _a1 interface{}) *CallStore_SetProviderByIP_Call {
	return &CallStore_SetProviderByIP_Call{Call: _e.mock.On("SetProviderByIP", _a0, _a1)}
}

func (_c *CallStore_SetProviderByIP_Call) Run(run func(_a0 string, _a1 string)) *CallStore_SetProviderByIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *CallStore_SetProviderByIP_Call) Return(_a0 error) *CallStore_SetProviderByIP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CallStore_SetProviderByIP_Call) RunAndReturn(run func(string, string) error) *CallStore_SetProviderByIP_Call {
	_c.Call.Return(run)
	return _c
}

// SetSIPCallID provides a mock function with given fields: _a0, _a1
func (_m *CallStore) SetSIPCallID(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CallStore_SetSIPCallID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSIPCallID'
type CallStore_SetSIPCallID_Call struct {
	*mock.Call
}

// SetSIPCallID is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
func (_e *CallStore_Expecter) SetSIPCallID(_a0 interface{}, _a1 interface{}) *CallStore_SetSIPCallID_Call {
	return &CallStore_SetSIPCallID_Call{Call: _e.mock.On("SetSIPCallID", _a0, _a1)}
}

func (_c *CallStore_SetSIPCallID_Call) Run(run func(_a0 string, _a1 string)) *CallStore_SetSIPCallID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *CallStore_SetSIPCallID_Call) Return(_a0 error) *CallStore_SetSIPCallID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CallStore_SetSIPCallID_Call) RunAndReturn(run func(string, string) error) *CallStore_SetSIPCallID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCall provides a mock function with given fields: _a0
func (_m *CallStore) UpdateCall(_a0 *model.CallUpdate) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.CallUpdate) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CallStore_UpdateCall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCall'
type CallStore_UpdateCall_Call struct {
	*mock.Call
}

// UpdateCall is a helper method to define mock.On call
//   - _a0 *model.CallUpdate
func (_e *CallStore_Expecter) UpdateCall(_a0 interface{}) *CallStore_UpdateCall_Call {
	return &CallStore_UpdateCall_Call{Call: _e.mock.On("UpdateCall", _a0)}
}

func (_c *CallStore_UpdateCall_Call) Run(run func(_a0 *model.CallUpdate)) *CallStore_UpdateCall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.CallUpdate))
	})
	return _c
}

func (_c *CallStore_UpdateCall_Call) Return(_a0 error) *CallStore_UpdateCall_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CallStore_UpdateCall_Call) RunAndReturn(run func(*model.CallUpdate) error) *CallStore_UpdateCall_Call {
	_c.Call.Return(run)
	return _c
}

// NewCallStore creates a new instance of CallStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCallStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *CallStore {
	mock := &CallStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
