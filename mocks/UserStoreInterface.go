// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	lineblocs "github.com/Lineblocs/go-helpers"
	mock "github.com/stretchr/testify/mock"

	model "lineblocs.com/api/model"

	sql "database/sql"
)

// UserStoreInterface is an autogenerated mock type for the UserStoreInterface type
type UserStoreInterface struct {
	mock.Mock
}

type UserStoreInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *UserStoreInterface) EXPECT() *UserStoreInterface_Expecter {
	return &UserStoreInterface_Expecter{mock: &_m.Mock}
}

// CaptureSIPMessage provides a mock function with given fields: _a0, _a1
func (_m *UserStoreInterface) CaptureSIPMessage(_a0 string, _a1 string) ([]byte, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]byte, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) []byte); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_CaptureSIPMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CaptureSIPMessage'
type UserStoreInterface_CaptureSIPMessage_Call struct {
	*mock.Call
}

// CaptureSIPMessage is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
func (_e *UserStoreInterface_Expecter) CaptureSIPMessage(_a0 interface{}, _a1 interface{}) *UserStoreInterface_CaptureSIPMessage_Call {
	return &UserStoreInterface_CaptureSIPMessage_Call{Call: _e.mock.On("CaptureSIPMessage", _a0, _a1)}
}

func (_c *UserStoreInterface_CaptureSIPMessage_Call) Run(run func(_a0 string, _a1 string)) *UserStoreInterface_CaptureSIPMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *UserStoreInterface_CaptureSIPMessage_Call) Return(_a0 []byte, _a1 error) *UserStoreInterface_CaptureSIPMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_CaptureSIPMessage_Call) RunAndReturn(run func(string, string) ([]byte, error)) *UserStoreInterface_CaptureSIPMessage_Call {
	_c.Call.Return(run)
	return _c
}

// CheckBYOPSTNIPWhitelist provides a mock function with given fields: _a0, _a1
func (_m *UserStoreInterface) CheckBYOPSTNIPWhitelist(_a0 string, _a1 string) (bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_CheckBYOPSTNIPWhitelist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckBYOPSTNIPWhitelist'
type UserStoreInterface_CheckBYOPSTNIPWhitelist_Call struct {
	*mock.Call
}

// CheckBYOPSTNIPWhitelist is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
func (_e *UserStoreInterface_Expecter) CheckBYOPSTNIPWhitelist(_a0 interface{}, _a1 interface{}) *UserStoreInterface_CheckBYOPSTNIPWhitelist_Call {
	return &UserStoreInterface_CheckBYOPSTNIPWhitelist_Call{Call: _e.mock.On("CheckBYOPSTNIPWhitelist", _a0, _a1)}
}

func (_c *UserStoreInterface_CheckBYOPSTNIPWhitelist_Call) Run(run func(_a0 string, _a1 string)) *UserStoreInterface_CheckBYOPSTNIPWhitelist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *UserStoreInterface_CheckBYOPSTNIPWhitelist_Call) Return(_a0 bool, _a1 error) *UserStoreInterface_CheckBYOPSTNIPWhitelist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_CheckBYOPSTNIPWhitelist_Call) RunAndReturn(run func(string, string) (bool, error)) *UserStoreInterface_CheckBYOPSTNIPWhitelist_Call {
	_c.Call.Return(run)
	return _c
}

// CheckPSTNIPWhitelist provides a mock function with given fields: _a0, _a1
func (_m *UserStoreInterface) CheckPSTNIPWhitelist(_a0 string, _a1 string) (bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_CheckPSTNIPWhitelist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckPSTNIPWhitelist'
type UserStoreInterface_CheckPSTNIPWhitelist_Call struct {
	*mock.Call
}

// CheckPSTNIPWhitelist is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
func (_e *UserStoreInterface_Expecter) CheckPSTNIPWhitelist(_a0 interface{}, _a1 interface{}) *UserStoreInterface_CheckPSTNIPWhitelist_Call {
	return &UserStoreInterface_CheckPSTNIPWhitelist_Call{Call: _e.mock.On("CheckPSTNIPWhitelist", _a0, _a1)}
}

func (_c *UserStoreInterface_CheckPSTNIPWhitelist_Call) Run(run func(_a0 string, _a1 string)) *UserStoreInterface_CheckPSTNIPWhitelist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *UserStoreInterface_CheckPSTNIPWhitelist_Call) Return(_a0 bool, _a1 error) *UserStoreInterface_CheckPSTNIPWhitelist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_CheckPSTNIPWhitelist_Call) RunAndReturn(run func(string, string) (bool, error)) *UserStoreInterface_CheckPSTNIPWhitelist_Call {
	_c.Call.Return(run)
	return _c
}

// DoVerifyCaller provides a mock function with given fields: _a0, _a1
func (_m *UserStoreInterface) DoVerifyCaller(_a0 *model.Workspace, _a1 string) (bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Workspace, string) (bool, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*model.Workspace, string) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*model.Workspace, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_DoVerifyCaller_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoVerifyCaller'
type UserStoreInterface_DoVerifyCaller_Call struct {
	*mock.Call
}

// DoVerifyCaller is a helper method to define mock.On call
//   - _a0 *model.Workspace
//   - _a1 string
func (_e *UserStoreInterface_Expecter) DoVerifyCaller(_a0 interface{}, _a1 interface{}) *UserStoreInterface_DoVerifyCaller_Call {
	return &UserStoreInterface_DoVerifyCaller_Call{Call: _e.mock.On("DoVerifyCaller", _a0, _a1)}
}

func (_c *UserStoreInterface_DoVerifyCaller_Call) Run(run func(_a0 *model.Workspace, _a1 string)) *UserStoreInterface_DoVerifyCaller_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Workspace), args[1].(string))
	})
	return _c
}

func (_c *UserStoreInterface_DoVerifyCaller_Call) Return(_a0 bool, _a1 error) *UserStoreInterface_DoVerifyCaller_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_DoVerifyCaller_Call) RunAndReturn(run func(*model.Workspace, string) (bool, error)) *UserStoreInterface_DoVerifyCaller_Call {
	_c.Call.Return(run)
	return _c
}

// FinishValidation provides a mock function with given fields: _a0, _a1
func (_m *UserStoreInterface) FinishValidation(_a0 string, _a1 string) (bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_FinishValidation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinishValidation'
type UserStoreInterface_FinishValidation_Call struct {
	*mock.Call
}

// FinishValidation is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
func (_e *UserStoreInterface_Expecter) FinishValidation(_a0 interface{}, _a1 interface{}) *UserStoreInterface_FinishValidation_Call {
	return &UserStoreInterface_FinishValidation_Call{Call: _e.mock.On("FinishValidation", _a0, _a1)}
}

func (_c *UserStoreInterface_FinishValidation_Call) Run(run func(_a0 string, _a1 string)) *UserStoreInterface_FinishValidation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *UserStoreInterface_FinishValidation_Call) Return(_a0 bool, _a1 error) *UserStoreInterface_FinishValidation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_FinishValidation_Call) RunAndReturn(run func(string, string) (bool, error)) *UserStoreInterface_FinishValidation_Call {
	_c.Call.Return(run)
	return _c
}

// GetBYODIDNumberData provides a mock function with given fields: _a0
func (_m *UserStoreInterface) GetBYODIDNumberData(_a0 string) (*model.WorkspaceDIDInfo, sql.NullString, error) {
	ret := _m.Called(_a0)

	var r0 *model.WorkspaceDIDInfo
	var r1 sql.NullString
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*model.WorkspaceDIDInfo, sql.NullString, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *model.WorkspaceDIDInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WorkspaceDIDInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) sql.NullString); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(sql.NullString)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserStoreInterface_GetBYODIDNumberData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBYODIDNumberData'
type UserStoreInterface_GetBYODIDNumberData_Call struct {
	*mock.Call
}

// GetBYODIDNumberData is a helper method to define mock.On call
//   - _a0 string
func (_e *UserStoreInterface_Expecter) GetBYODIDNumberData(_a0 interface{}) *UserStoreInterface_GetBYODIDNumberData_Call {
	return &UserStoreInterface_GetBYODIDNumberData_Call{Call: _e.mock.On("GetBYODIDNumberData", _a0)}
}

func (_c *UserStoreInterface_GetBYODIDNumberData_Call) Run(run func(_a0 string)) *UserStoreInterface_GetBYODIDNumberData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserStoreInterface_GetBYODIDNumberData_Call) Return(_a0 *model.WorkspaceDIDInfo, _a1 sql.NullString, _a2 error) *UserStoreInterface_GetBYODIDNumberData_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *UserStoreInterface_GetBYODIDNumberData_Call) RunAndReturn(run func(string) (*model.WorkspaceDIDInfo, sql.NullString, error)) *UserStoreInterface_GetBYODIDNumberData_Call {
	_c.Call.Return(run)
	return _c
}

// GetBYOPSTNProvider provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserStoreInterface) GetBYOPSTNProvider(_a0 string, _a1 string, _a2 int) (*model.PSTNInfo, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *model.PSTNInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int) (*model.PSTNInfo, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(string, string, int) *model.PSTNInfo); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PSTNInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_GetBYOPSTNProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBYOPSTNProvider'
type UserStoreInterface_GetBYOPSTNProvider_Call struct {
	*mock.Call
}

// GetBYOPSTNProvider is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
//   - _a2 int
func (_e *UserStoreInterface_Expecter) GetBYOPSTNProvider(_a0 interface{}, _a1 interface{}, _a2 interface{}) *UserStoreInterface_GetBYOPSTNProvider_Call {
	return &UserStoreInterface_GetBYOPSTNProvider_Call{Call: _e.mock.On("GetBYOPSTNProvider", _a0, _a1, _a2)}
}

func (_c *UserStoreInterface_GetBYOPSTNProvider_Call) Run(run func(_a0 string, _a1 string, _a2 int)) *UserStoreInterface_GetBYOPSTNProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *UserStoreInterface_GetBYOPSTNProvider_Call) Return(_a0 *model.PSTNInfo, _a1 error) *UserStoreInterface_GetBYOPSTNProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_GetBYOPSTNProvider_Call) RunAndReturn(run func(string, string, int) (*model.PSTNInfo, error)) *UserStoreInterface_GetBYOPSTNProvider_Call {
	_c.Call.Return(run)
	return _c
}

// GetBestPSTNProvider provides a mock function with given fields: _a0, _a1
func (_m *UserStoreInterface) GetBestPSTNProvider(_a0 string, _a1 string) (*model.PSTNInfo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.PSTNInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.PSTNInfo, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.PSTNInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PSTNInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_GetBestPSTNProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBestPSTNProvider'
type UserStoreInterface_GetBestPSTNProvider_Call struct {
	*mock.Call
}

// GetBestPSTNProvider is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
func (_e *UserStoreInterface_Expecter) GetBestPSTNProvider(_a0 interface{}, _a1 interface{}) *UserStoreInterface_GetBestPSTNProvider_Call {
	return &UserStoreInterface_GetBestPSTNProvider_Call{Call: _e.mock.On("GetBestPSTNProvider", _a0, _a1)}
}

func (_c *UserStoreInterface_GetBestPSTNProvider_Call) Run(run func(_a0 string, _a1 string)) *UserStoreInterface_GetBestPSTNProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *UserStoreInterface_GetBestPSTNProvider_Call) Return(_a0 *model.PSTNInfo, _a1 error) *UserStoreInterface_GetBestPSTNProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_GetBestPSTNProvider_Call) RunAndReturn(run func(string, string) (*model.PSTNInfo, error)) *UserStoreInterface_GetBestPSTNProvider_Call {
	_c.Call.Return(run)
	return _c
}

// GetCallerIdToUse provides a mock function with given fields: _a0, _a1
func (_m *UserStoreInterface) GetCallerIdToUse(_a0 *model.Workspace, _a1 string) (string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Workspace, string) (string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*model.Workspace, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*model.Workspace, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_GetCallerIdToUse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCallerIdToUse'
type UserStoreInterface_GetCallerIdToUse_Call struct {
	*mock.Call
}

// GetCallerIdToUse is a helper method to define mock.On call
//   - _a0 *model.Workspace
//   - _a1 string
func (_e *UserStoreInterface_Expecter) GetCallerIdToUse(_a0 interface{}, _a1 interface{}) *UserStoreInterface_GetCallerIdToUse_Call {
	return &UserStoreInterface_GetCallerIdToUse_Call{Call: _e.mock.On("GetCallerIdToUse", _a0, _a1)}
}

func (_c *UserStoreInterface_GetCallerIdToUse_Call) Run(run func(_a0 *model.Workspace, _a1 string)) *UserStoreInterface_GetCallerIdToUse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Workspace), args[1].(string))
	})
	return _c
}

func (_c *UserStoreInterface_GetCallerIdToUse_Call) Return(_a0 string, _a1 error) *UserStoreInterface_GetCallerIdToUse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_GetCallerIdToUse_Call) RunAndReturn(run func(*model.Workspace, string) (string, error)) *UserStoreInterface_GetCallerIdToUse_Call {
	_c.Call.Return(run)
	return _c
}

// GetCodeFlowInfo provides a mock function with given fields: _a0, _a1
func (_m *UserStoreInterface) GetCodeFlowInfo(_a0 string, _a1 string) (*model.CodeFlowInfo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.CodeFlowInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.CodeFlowInfo, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.CodeFlowInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CodeFlowInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_GetCodeFlowInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCodeFlowInfo'
type UserStoreInterface_GetCodeFlowInfo_Call struct {
	*mock.Call
}

// GetCodeFlowInfo is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
func (_e *UserStoreInterface_Expecter) GetCodeFlowInfo(_a0 interface{}, _a1 interface{}) *UserStoreInterface_GetCodeFlowInfo_Call {
	return &UserStoreInterface_GetCodeFlowInfo_Call{Call: _e.mock.On("GetCodeFlowInfo", _a0, _a1)}
}

func (_c *UserStoreInterface_GetCodeFlowInfo_Call) Run(run func(_a0 string, _a1 string)) *UserStoreInterface_GetCodeFlowInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *UserStoreInterface_GetCodeFlowInfo_Call) Return(_a0 *model.CodeFlowInfo, _a1 error) *UserStoreInterface_GetCodeFlowInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_GetCodeFlowInfo_Call) RunAndReturn(run func(string, string) (*model.CodeFlowInfo, error)) *UserStoreInterface_GetCodeFlowInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetDIDAcceptOption provides a mock function with given fields: _a0
func (_m *UserStoreInterface) GetDIDAcceptOption(_a0 string) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_GetDIDAcceptOption_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDIDAcceptOption'
type UserStoreInterface_GetDIDAcceptOption_Call struct {
	*mock.Call
}

// GetDIDAcceptOption is a helper method to define mock.On call
//   - _a0 string
func (_e *UserStoreInterface_Expecter) GetDIDAcceptOption(_a0 interface{}) *UserStoreInterface_GetDIDAcceptOption_Call {
	return &UserStoreInterface_GetDIDAcceptOption_Call{Call: _e.mock.On("GetDIDAcceptOption", _a0)}
}

func (_c *UserStoreInterface_GetDIDAcceptOption_Call) Run(run func(_a0 string)) *UserStoreInterface_GetDIDAcceptOption_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserStoreInterface_GetDIDAcceptOption_Call) Return(_a0 []byte, _a1 error) *UserStoreInterface_GetDIDAcceptOption_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_GetDIDAcceptOption_Call) RunAndReturn(run func(string) ([]byte, error)) *UserStoreInterface_GetDIDAcceptOption_Call {
	_c.Call.Return(run)
	return _c
}

// GetDIDNumberData provides a mock function with given fields: _a0
func (_m *UserStoreInterface) GetDIDNumberData(_a0 string) (*model.WorkspaceDIDInfo, sql.NullString, error) {
	ret := _m.Called(_a0)

	var r0 *model.WorkspaceDIDInfo
	var r1 sql.NullString
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*model.WorkspaceDIDInfo, sql.NullString, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *model.WorkspaceDIDInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WorkspaceDIDInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) sql.NullString); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(sql.NullString)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserStoreInterface_GetDIDNumberData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDIDNumberData'
type UserStoreInterface_GetDIDNumberData_Call struct {
	*mock.Call
}

// GetDIDNumberData is a helper method to define mock.On call
//   - _a0 string
func (_e *UserStoreInterface_Expecter) GetDIDNumberData(_a0 interface{}) *UserStoreInterface_GetDIDNumberData_Call {
	return &UserStoreInterface_GetDIDNumberData_Call{Call: _e.mock.On("GetDIDNumberData", _a0)}
}

func (_c *UserStoreInterface_GetDIDNumberData_Call) Run(run func(_a0 string)) *UserStoreInterface_GetDIDNumberData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserStoreInterface_GetDIDNumberData_Call) Return(_a0 *model.WorkspaceDIDInfo, _a1 sql.NullString, _a2 error) *UserStoreInterface_GetDIDNumberData_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *UserStoreInterface_GetDIDNumberData_Call) RunAndReturn(run func(string) (*model.WorkspaceDIDInfo, sql.NullString, error)) *UserStoreInterface_GetDIDNumberData_Call {
	_c.Call.Return(run)
	return _c
}

// GetExtensionFlowInfo provides a mock function with given fields: _a0, _a1
func (_m *UserStoreInterface) GetExtensionFlowInfo(_a0 string, _a1 string) (*model.ExtensionFlowInfo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.ExtensionFlowInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.ExtensionFlowInfo, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.ExtensionFlowInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ExtensionFlowInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_GetExtensionFlowInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExtensionFlowInfo'
type UserStoreInterface_GetExtensionFlowInfo_Call struct {
	*mock.Call
}

// GetExtensionFlowInfo is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
func (_e *UserStoreInterface_Expecter) GetExtensionFlowInfo(_a0 interface{}, _a1 interface{}) *UserStoreInterface_GetExtensionFlowInfo_Call {
	return &UserStoreInterface_GetExtensionFlowInfo_Call{Call: _e.mock.On("GetExtensionFlowInfo", _a0, _a1)}
}

func (_c *UserStoreInterface_GetExtensionFlowInfo_Call) Run(run func(_a0 string, _a1 string)) *UserStoreInterface_GetExtensionFlowInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *UserStoreInterface_GetExtensionFlowInfo_Call) Return(_a0 *model.ExtensionFlowInfo, _a1 error) *UserStoreInterface_GetExtensionFlowInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_GetExtensionFlowInfo_Call) RunAndReturn(run func(string, string) (*model.ExtensionFlowInfo, error)) *UserStoreInterface_GetExtensionFlowInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetFlowInfo provides a mock function with given fields: _a0, _a1
func (_m *UserStoreInterface) GetFlowInfo(_a0 string, _a1 string) (*model.ExtensionFlowInfo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.ExtensionFlowInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.ExtensionFlowInfo, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.ExtensionFlowInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ExtensionFlowInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_GetFlowInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlowInfo'
type UserStoreInterface_GetFlowInfo_Call struct {
	*mock.Call
}

// GetFlowInfo is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
func (_e *UserStoreInterface_Expecter) GetFlowInfo(_a0 interface{}, _a1 interface{}) *UserStoreInterface_GetFlowInfo_Call {
	return &UserStoreInterface_GetFlowInfo_Call{Call: _e.mock.On("GetFlowInfo", _a0, _a1)}
}

func (_c *UserStoreInterface_GetFlowInfo_Call) Run(run func(_a0 string, _a1 string)) *UserStoreInterface_GetFlowInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *UserStoreInterface_GetFlowInfo_Call) Return(_a0 *model.ExtensionFlowInfo, _a1 error) *UserStoreInterface_GetFlowInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_GetFlowInfo_Call) RunAndReturn(run func(string, string) (*model.ExtensionFlowInfo, error)) *UserStoreInterface_GetFlowInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetSettings provides a mock function with given fields:
func (_m *UserStoreInterface) GetSettings() (*model.Settings, error) {
	ret := _m.Called()

	var r0 *model.Settings
	var r1 error
	if rf, ok := ret.Get(0).(func() (*model.Settings, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *model.Settings); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Settings)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_GetSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSettings'
type UserStoreInterface_GetSettings_Call struct {
	*mock.Call
}

// GetSettings is a helper method to define mock.On call
func (_e *UserStoreInterface_Expecter) GetSettings() *UserStoreInterface_GetSettings_Call {
	return &UserStoreInterface_GetSettings_Call{Call: _e.mock.On("GetSettings")}
}

func (_c *UserStoreInterface_GetSettings_Call) Run(run func()) *UserStoreInterface_GetSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UserStoreInterface_GetSettings_Call) Return(_a0 *model.Settings, _a1 error) *UserStoreInterface_GetSettings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_GetSettings_Call) RunAndReturn(run func() (*model.Settings, error)) *UserStoreInterface_GetSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByDID provides a mock function with given fields: did
func (_m *UserStoreInterface) GetUserByDID(did string) (string, error) {
	ret := _m.Called(did)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(did)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(did)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(did)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_GetUserByDID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByDID'
type UserStoreInterface_GetUserByDID_Call struct {
	*mock.Call
}

// GetUserByDID is a helper method to define mock.On call
//   - did string
func (_e *UserStoreInterface_Expecter) GetUserByDID(did interface{}) *UserStoreInterface_GetUserByDID_Call {
	return &UserStoreInterface_GetUserByDID_Call{Call: _e.mock.On("GetUserByDID", did)}
}

func (_c *UserStoreInterface_GetUserByDID_Call) Run(run func(did string)) *UserStoreInterface_GetUserByDID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserStoreInterface_GetUserByDID_Call) Return(_a0 string, _a1 error) *UserStoreInterface_GetUserByDID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_GetUserByDID_Call) RunAndReturn(run func(string) (string, error)) *UserStoreInterface_GetUserByDID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByTrunkSourceIp provides a mock function with given fields: _a0
func (_m *UserStoreInterface) GetUserByTrunkSourceIp(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_GetUserByTrunkSourceIp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByTrunkSourceIp'
type UserStoreInterface_GetUserByTrunkSourceIp_Call struct {
	*mock.Call
}

// GetUserByTrunkSourceIp is a helper method to define mock.On call
//   - _a0 string
func (_e *UserStoreInterface_Expecter) GetUserByTrunkSourceIp(_a0 interface{}) *UserStoreInterface_GetUserByTrunkSourceIp_Call {
	return &UserStoreInterface_GetUserByTrunkSourceIp_Call{Call: _e.mock.On("GetUserByTrunkSourceIp", _a0)}
}

func (_c *UserStoreInterface_GetUserByTrunkSourceIp_Call) Run(run func(_a0 string)) *UserStoreInterface_GetUserByTrunkSourceIp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserStoreInterface_GetUserByTrunkSourceIp_Call) Return(_a0 string, _a1 error) *UserStoreInterface_GetUserByTrunkSourceIp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_GetUserByTrunkSourceIp_Call) RunAndReturn(run func(string) (string, error)) *UserStoreInterface_GetUserByTrunkSourceIp_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRoutedServer2 provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserStoreInterface) GetUserRoutedServer2(_a0 bool, _a1 *model.Workspace, _a2 string) (*lineblocs.MediaServer, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *lineblocs.MediaServer
	var r1 error
	if rf, ok := ret.Get(0).(func(bool, *model.Workspace, string) (*lineblocs.MediaServer, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(bool, *model.Workspace, string) *lineblocs.MediaServer); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lineblocs.MediaServer)
		}
	}

	if rf, ok := ret.Get(1).(func(bool, *model.Workspace, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_GetUserRoutedServer2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRoutedServer2'
type UserStoreInterface_GetUserRoutedServer2_Call struct {
	*mock.Call
}

// GetUserRoutedServer2 is a helper method to define mock.On call
//   - _a0 bool
//   - _a1 *model.Workspace
//   - _a2 string
func (_e *UserStoreInterface_Expecter) GetUserRoutedServer2(_a0 interface{}, _a1 interface{}, _a2 interface{}) *UserStoreInterface_GetUserRoutedServer2_Call {
	return &UserStoreInterface_GetUserRoutedServer2_Call{Call: _e.mock.On("GetUserRoutedServer2", _a0, _a1, _a2)}
}

func (_c *UserStoreInterface_GetUserRoutedServer2_Call) Run(run func(_a0 bool, _a1 *model.Workspace, _a2 string)) *UserStoreInterface_GetUserRoutedServer2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool), args[1].(*model.Workspace), args[2].(string))
	})
	return _c
}

func (_c *UserStoreInterface_GetUserRoutedServer2_Call) Return(_a0 *lineblocs.MediaServer, _a1 error) *UserStoreInterface_GetUserRoutedServer2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_GetUserRoutedServer2_Call) RunAndReturn(run func(bool, *model.Workspace, string) (*lineblocs.MediaServer, error)) *UserStoreInterface_GetUserRoutedServer2_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceMacros provides a mock function with given fields: _a0
func (_m *UserStoreInterface) GetWorkspaceMacros(_a0 string) ([]model.MacroFunction, error) {
	ret := _m.Called(_a0)

	var r0 []model.MacroFunction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]model.MacroFunction, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []model.MacroFunction); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.MacroFunction)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_GetWorkspaceMacros_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceMacros'
type UserStoreInterface_GetWorkspaceMacros_Call struct {
	*mock.Call
}

// GetWorkspaceMacros is a helper method to define mock.On call
//   - _a0 string
func (_e *UserStoreInterface_Expecter) GetWorkspaceMacros(_a0 interface{}) *UserStoreInterface_GetWorkspaceMacros_Call {
	return &UserStoreInterface_GetWorkspaceMacros_Call{Call: _e.mock.On("GetWorkspaceMacros", _a0)}
}

func (_c *UserStoreInterface_GetWorkspaceMacros_Call) Run(run func(_a0 string)) *UserStoreInterface_GetWorkspaceMacros_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserStoreInterface_GetWorkspaceMacros_Call) Return(_a0 []model.MacroFunction, _a1 error) *UserStoreInterface_GetWorkspaceMacros_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_GetWorkspaceMacros_Call) RunAndReturn(run func(string) ([]model.MacroFunction, error)) *UserStoreInterface_GetWorkspaceMacros_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceParams provides a mock function with given fields: _a0
func (_m *UserStoreInterface) GetWorkspaceParams(_a0 int) (*[]model.WorkspaceParam, error) {
	ret := _m.Called(_a0)

	var r0 *[]model.WorkspaceParam
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*[]model.WorkspaceParam, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) *[]model.WorkspaceParam); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.WorkspaceParam)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_GetWorkspaceParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceParams'
type UserStoreInterface_GetWorkspaceParams_Call struct {
	*mock.Call
}

// GetWorkspaceParams is a helper method to define mock.On call
//   - _a0 int
func (_e *UserStoreInterface_Expecter) GetWorkspaceParams(_a0 interface{}) *UserStoreInterface_GetWorkspaceParams_Call {
	return &UserStoreInterface_GetWorkspaceParams_Call{Call: _e.mock.On("GetWorkspaceParams", _a0)}
}

func (_c *UserStoreInterface_GetWorkspaceParams_Call) Run(run func(_a0 int)) *UserStoreInterface_GetWorkspaceParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *UserStoreInterface_GetWorkspaceParams_Call) Return(_a0 *[]model.WorkspaceParam, _a1 error) *UserStoreInterface_GetWorkspaceParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_GetWorkspaceParams_Call) RunAndReturn(run func(int) (*[]model.WorkspaceParam, error)) *UserStoreInterface_GetWorkspaceParams_Call {
	_c.Call.Return(run)
	return _c
}

// HostedSIPTrunkLookup provides a mock function with given fields: _a0, _a1
func (_m *UserStoreInterface) HostedSIPTrunkLookup(_a0 string, _a1 *model.Workspace) (bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *model.Workspace) (bool, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, *model.Workspace) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, *model.Workspace) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_HostedSIPTrunkLookup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HostedSIPTrunkLookup'
type UserStoreInterface_HostedSIPTrunkLookup_Call struct {
	*mock.Call
}

// HostedSIPTrunkLookup is a helper method to define mock.On call
//   - _a0 string
//   - _a1 *model.Workspace
func (_e *UserStoreInterface_Expecter) HostedSIPTrunkLookup(_a0 interface{}, _a1 interface{}) *UserStoreInterface_HostedSIPTrunkLookup_Call {
	return &UserStoreInterface_HostedSIPTrunkLookup_Call{Call: _e.mock.On("HostedSIPTrunkLookup", _a0, _a1)}
}

func (_c *UserStoreInterface_HostedSIPTrunkLookup_Call) Run(run func(_a0 string, _a1 *model.Workspace)) *UserStoreInterface_HostedSIPTrunkLookup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*model.Workspace))
	})
	return _c
}

func (_c *UserStoreInterface_HostedSIPTrunkLookup_Call) Return(_a0 bool, _a1 error) *UserStoreInterface_HostedSIPTrunkLookup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_HostedSIPTrunkLookup_Call) RunAndReturn(run func(string, *model.Workspace) (bool, error)) *UserStoreInterface_HostedSIPTrunkLookup_Call {
	_c.Call.Return(run)
	return _c
}

// IPWhitelistLookup provides a mock function with given fields: _a0, _a1
func (_m *UserStoreInterface) IPWhitelistLookup(_a0 string, _a1 *model.Workspace) (bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *model.Workspace) (bool, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, *model.Workspace) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, *model.Workspace) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_IPWhitelistLookup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IPWhitelistLookup'
type UserStoreInterface_IPWhitelistLookup_Call struct {
	*mock.Call
}

// IPWhitelistLookup is a helper method to define mock.On call
//   - _a0 string
//   - _a1 *model.Workspace
func (_e *UserStoreInterface_Expecter) IPWhitelistLookup(_a0 interface{}, _a1 interface{}) *UserStoreInterface_IPWhitelistLookup_Call {
	return &UserStoreInterface_IPWhitelistLookup_Call{Call: _e.mock.On("IPWhitelistLookup", _a0, _a1)}
}

func (_c *UserStoreInterface_IPWhitelistLookup_Call) Run(run func(_a0 string, _a1 *model.Workspace)) *UserStoreInterface_IPWhitelistLookup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*model.Workspace))
	})
	return _c
}

func (_c *UserStoreInterface_IPWhitelistLookup_Call) Return(_a0 bool, _a1 error) *UserStoreInterface_IPWhitelistLookup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_IPWhitelistLookup_Call) RunAndReturn(run func(string, *model.Workspace) (bool, error)) *UserStoreInterface_IPWhitelistLookup_Call {
	_c.Call.Return(run)
	return _c
}

// IncomingBYODIDValidation provides a mock function with given fields: _a0
func (_m *UserStoreInterface) IncomingBYODIDValidation(_a0 string) (*model.DidNumberInfo, error) {
	ret := _m.Called(_a0)

	var r0 *model.DidNumberInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.DidNumberInfo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *model.DidNumberInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DidNumberInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_IncomingBYODIDValidation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingBYODIDValidation'
type UserStoreInterface_IncomingBYODIDValidation_Call struct {
	*mock.Call
}

// IncomingBYODIDValidation is a helper method to define mock.On call
//   - _a0 string
func (_e *UserStoreInterface_Expecter) IncomingBYODIDValidation(_a0 interface{}) *UserStoreInterface_IncomingBYODIDValidation_Call {
	return &UserStoreInterface_IncomingBYODIDValidation_Call{Call: _e.mock.On("IncomingBYODIDValidation", _a0)}
}

func (_c *UserStoreInterface_IncomingBYODIDValidation_Call) Run(run func(_a0 string)) *UserStoreInterface_IncomingBYODIDValidation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserStoreInterface_IncomingBYODIDValidation_Call) Return(_a0 *model.DidNumberInfo, _a1 error) *UserStoreInterface_IncomingBYODIDValidation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_IncomingBYODIDValidation_Call) RunAndReturn(run func(string) (*model.DidNumberInfo, error)) *UserStoreInterface_IncomingBYODIDValidation_Call {
	_c.Call.Return(run)
	return _c
}

// IncomingDIDValidation provides a mock function with given fields: _a0
func (_m *UserStoreInterface) IncomingDIDValidation(_a0 string) (*model.DidNumberInfo, error) {
	ret := _m.Called(_a0)

	var r0 *model.DidNumberInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.DidNumberInfo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *model.DidNumberInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DidNumberInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_IncomingDIDValidation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingDIDValidation'
type UserStoreInterface_IncomingDIDValidation_Call struct {
	*mock.Call
}

// IncomingDIDValidation is a helper method to define mock.On call
//   - _a0 string
func (_e *UserStoreInterface_Expecter) IncomingDIDValidation(_a0 interface{}) *UserStoreInterface_IncomingDIDValidation_Call {
	return &UserStoreInterface_IncomingDIDValidation_Call{Call: _e.mock.On("IncomingDIDValidation", _a0)}
}

func (_c *UserStoreInterface_IncomingDIDValidation_Call) Run(run func(_a0 string)) *UserStoreInterface_IncomingDIDValidation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserStoreInterface_IncomingDIDValidation_Call) Return(_a0 *model.DidNumberInfo, _a1 error) *UserStoreInterface_IncomingDIDValidation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_IncomingDIDValidation_Call) RunAndReturn(run func(string) (*model.DidNumberInfo, error)) *UserStoreInterface_IncomingDIDValidation_Call {
	_c.Call.Return(run)
	return _c
}

// IncomingMediaServerValidation provides a mock function with given fields: _a0
func (_m *UserStoreInterface) IncomingMediaServerValidation(_a0 string) (bool, error) {
	ret := _m.Called(_a0)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_IncomingMediaServerValidation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingMediaServerValidation'
type UserStoreInterface_IncomingMediaServerValidation_Call struct {
	*mock.Call
}

// IncomingMediaServerValidation is a helper method to define mock.On call
//   - _a0 string
func (_e *UserStoreInterface_Expecter) IncomingMediaServerValidation(_a0 interface{}) *UserStoreInterface_IncomingMediaServerValidation_Call {
	return &UserStoreInterface_IncomingMediaServerValidation_Call{Call: _e.mock.On("IncomingMediaServerValidation", _a0)}
}

func (_c *UserStoreInterface_IncomingMediaServerValidation_Call) Run(run func(_a0 string)) *UserStoreInterface_IncomingMediaServerValidation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserStoreInterface_IncomingMediaServerValidation_Call) Return(_a0 bool, _a1 error) *UserStoreInterface_IncomingMediaServerValidation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_IncomingMediaServerValidation_Call) RunAndReturn(run func(string) (bool, error)) *UserStoreInterface_IncomingMediaServerValidation_Call {
	_c.Call.Return(run)
	return _c
}

// IncomingTrunkValidation provides a mock function with given fields: _a0
func (_m *UserStoreInterface) IncomingTrunkValidation(_a0 string) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_IncomingTrunkValidation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingTrunkValidation'
type UserStoreInterface_IncomingTrunkValidation_Call struct {
	*mock.Call
}

// IncomingTrunkValidation is a helper method to define mock.On call
//   - _a0 string
func (_e *UserStoreInterface_Expecter) IncomingTrunkValidation(_a0 interface{}) *UserStoreInterface_IncomingTrunkValidation_Call {
	return &UserStoreInterface_IncomingTrunkValidation_Call{Call: _e.mock.On("IncomingTrunkValidation", _a0)}
}

func (_c *UserStoreInterface_IncomingTrunkValidation_Call) Run(run func(_a0 string)) *UserStoreInterface_IncomingTrunkValidation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserStoreInterface_IncomingTrunkValidation_Call) Return(_a0 []byte, _a1 error) *UserStoreInterface_IncomingTrunkValidation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_IncomingTrunkValidation_Call) RunAndReturn(run func(string) ([]byte, error)) *UserStoreInterface_IncomingTrunkValidation_Call {
	_c.Call.Return(run)
	return _c
}

// LogCallByeEvent provides a mock function with given fields: _a0
func (_m *UserStoreInterface) LogCallByeEvent(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserStoreInterface_LogCallByeEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogCallByeEvent'
type UserStoreInterface_LogCallByeEvent_Call struct {
	*mock.Call
}

// LogCallByeEvent is a helper method to define mock.On call
//   - _a0 string
func (_e *UserStoreInterface_Expecter) LogCallByeEvent(_a0 interface{}) *UserStoreInterface_LogCallByeEvent_Call {
	return &UserStoreInterface_LogCallByeEvent_Call{Call: _e.mock.On("LogCallByeEvent", _a0)}
}

func (_c *UserStoreInterface_LogCallByeEvent_Call) Run(run func(_a0 string)) *UserStoreInterface_LogCallByeEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserStoreInterface_LogCallByeEvent_Call) Return(_a0 error) *UserStoreInterface_LogCallByeEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserStoreInterface_LogCallByeEvent_Call) RunAndReturn(run func(string) error) *UserStoreInterface_LogCallByeEvent_Call {
	_c.Call.Return(run)
	return _c
}

// LogCallInviteEvent provides a mock function with given fields: _a0
func (_m *UserStoreInterface) LogCallInviteEvent(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserStoreInterface_LogCallInviteEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogCallInviteEvent'
type UserStoreInterface_LogCallInviteEvent_Call struct {
	*mock.Call
}

// LogCallInviteEvent is a helper method to define mock.On call
//   - _a0 string
func (_e *UserStoreInterface_Expecter) LogCallInviteEvent(_a0 interface{}) *UserStoreInterface_LogCallInviteEvent_Call {
	return &UserStoreInterface_LogCallInviteEvent_Call{Call: _e.mock.On("LogCallInviteEvent", _a0)}
}

func (_c *UserStoreInterface_LogCallInviteEvent_Call) Run(run func(_a0 string)) *UserStoreInterface_LogCallInviteEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserStoreInterface_LogCallInviteEvent_Call) Return(_a0 error) *UserStoreInterface_LogCallInviteEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserStoreInterface_LogCallInviteEvent_Call) RunAndReturn(run func(string) error) *UserStoreInterface_LogCallInviteEvent_Call {
	_c.Call.Return(run)
	return _c
}

// LookupSIPTrunkByDID provides a mock function with given fields: _a0
func (_m *UserStoreInterface) LookupSIPTrunkByDID(_a0 string) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_LookupSIPTrunkByDID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupSIPTrunkByDID'
type UserStoreInterface_LookupSIPTrunkByDID_Call struct {
	*mock.Call
}

// LookupSIPTrunkByDID is a helper method to define mock.On call
//   - _a0 string
func (_e *UserStoreInterface_Expecter) LookupSIPTrunkByDID(_a0 interface{}) *UserStoreInterface_LookupSIPTrunkByDID_Call {
	return &UserStoreInterface_LookupSIPTrunkByDID_Call{Call: _e.mock.On("LookupSIPTrunkByDID", _a0)}
}

func (_c *UserStoreInterface_LookupSIPTrunkByDID_Call) Run(run func(_a0 string)) *UserStoreInterface_LookupSIPTrunkByDID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserStoreInterface_LookupSIPTrunkByDID_Call) Return(_a0 []byte, _a1 error) *UserStoreInterface_LookupSIPTrunkByDID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_LookupSIPTrunkByDID_Call) RunAndReturn(run func(string) ([]byte, error)) *UserStoreInterface_LookupSIPTrunkByDID_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessDialplan provides a mock function with given fields: _a0
func (_m *UserStoreInterface) ProcessDialplan(_a0 string) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_ProcessDialplan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessDialplan'
type UserStoreInterface_ProcessDialplan_Call struct {
	*mock.Call
}

// ProcessDialplan is a helper method to define mock.On call
//   - _a0 string
func (_e *UserStoreInterface_Expecter) ProcessDialplan(_a0 interface{}) *UserStoreInterface_ProcessDialplan_Call {
	return &UserStoreInterface_ProcessDialplan_Call{Call: _e.mock.On("ProcessDialplan", _a0)}
}

func (_c *UserStoreInterface_ProcessDialplan_Call) Run(run func(_a0 string)) *UserStoreInterface_ProcessDialplan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserStoreInterface_ProcessDialplan_Call) Return(_a0 []byte, _a1 error) *UserStoreInterface_ProcessDialplan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_ProcessDialplan_Call) RunAndReturn(run func(string) ([]byte, error)) *UserStoreInterface_ProcessDialplan_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessSIPTrunkCall provides a mock function with given fields: _a0
func (_m *UserStoreInterface) ProcessSIPTrunkCall(_a0 string) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStoreInterface_ProcessSIPTrunkCall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessSIPTrunkCall'
type UserStoreInterface_ProcessSIPTrunkCall_Call struct {
	*mock.Call
}

// ProcessSIPTrunkCall is a helper method to define mock.On call
//   - _a0 string
func (_e *UserStoreInterface_Expecter) ProcessSIPTrunkCall(_a0 interface{}) *UserStoreInterface_ProcessSIPTrunkCall_Call {
	return &UserStoreInterface_ProcessSIPTrunkCall_Call{Call: _e.mock.On("ProcessSIPTrunkCall", _a0)}
}

func (_c *UserStoreInterface_ProcessSIPTrunkCall_Call) Run(run func(_a0 string)) *UserStoreInterface_ProcessSIPTrunkCall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserStoreInterface_ProcessSIPTrunkCall_Call) Return(_a0 []byte, _a1 error) *UserStoreInterface_ProcessSIPTrunkCall_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStoreInterface_ProcessSIPTrunkCall_Call) RunAndReturn(run func(string) ([]byte, error)) *UserStoreInterface_ProcessSIPTrunkCall_Call {
	_c.Call.Return(run)
	return _c
}

// StoreRegistration provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserStoreInterface) StoreRegistration(_a0 string, _a1 int, _a2 *model.Workspace) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int, *model.Workspace) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserStoreInterface_StoreRegistration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreRegistration'
type UserStoreInterface_StoreRegistration_Call struct {
	*mock.Call
}

// StoreRegistration is a helper method to define mock.On call
//   - _a0 string
//   - _a1 int
//   - _a2 *model.Workspace
func (_e *UserStoreInterface_Expecter) StoreRegistration(_a0 interface{}, _a1 interface{}, _a2 interface{}) *UserStoreInterface_StoreRegistration_Call {
	return &UserStoreInterface_StoreRegistration_Call{Call: _e.mock.On("StoreRegistration", _a0, _a1, _a2)}
}

func (_c *UserStoreInterface_StoreRegistration_Call) Run(run func(_a0 string, _a1 int, _a2 *model.Workspace)) *UserStoreInterface_StoreRegistration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(*model.Workspace))
	})
	return _c
}

func (_c *UserStoreInterface_StoreRegistration_Call) Return(_a0 error) *UserStoreInterface_StoreRegistration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserStoreInterface_StoreRegistration_Call) RunAndReturn(run func(string, int, *model.Workspace) error) *UserStoreInterface_StoreRegistration_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAccess provides a mock function with given fields: _a0, _a1
func (_m *UserStoreInterface) ValidateAccess(_a0 string, _a1 string) bool {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UserStoreInterface_ValidateAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAccess'
type UserStoreInterface_ValidateAccess_Call struct {
	*mock.Call
}

// ValidateAccess is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
func (_e *UserStoreInterface_Expecter) ValidateAccess(_a0 interface{}, _a1 interface{}) *UserStoreInterface_ValidateAccess_Call {
	return &UserStoreInterface_ValidateAccess_Call{Call: _e.mock.On("ValidateAccess", _a0, _a1)}
}

func (_c *UserStoreInterface_ValidateAccess_Call) Run(run func(_a0 string, _a1 string)) *UserStoreInterface_ValidateAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *UserStoreInterface_ValidateAccess_Call) Return(_a0 bool) *UserStoreInterface_ValidateAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserStoreInterface_ValidateAccess_Call) RunAndReturn(run func(string, string) bool) *UserStoreInterface_ValidateAccess_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserStoreInterface creates a new instance of UserStoreInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserStoreInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserStoreInterface {
	mock := &UserStoreInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
