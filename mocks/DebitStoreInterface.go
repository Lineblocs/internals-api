// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "lineblocs.com/api/model"
)

// DebitStoreInterface is an autogenerated mock type for the DebitStoreInterface type
type DebitStoreInterface struct {
	mock.Mock
}

type DebitStoreInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *DebitStoreInterface) EXPECT() *DebitStoreInterface_Expecter {
	return &DebitStoreInterface_Expecter{mock: &_m.Mock}
}

// CreateAPIUsageDebit provides a mock function with given fields: _a0, _a1
func (_m *DebitStoreInterface) CreateAPIUsageDebit(_a0 *model.Workspace, _a1 *model.DebitAPI) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Workspace, *model.DebitAPI) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DebitStoreInterface_CreateAPIUsageDebit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAPIUsageDebit'
type DebitStoreInterface_CreateAPIUsageDebit_Call struct {
	*mock.Call
}

// CreateAPIUsageDebit is a helper method to define mock.On call
//   - _a0 *model.Workspace
//   - _a1 *model.DebitAPI
func (_e *DebitStoreInterface_Expecter) CreateAPIUsageDebit(_a0 interface{}, _a1 interface{}) *DebitStoreInterface_CreateAPIUsageDebit_Call {
	return &DebitStoreInterface_CreateAPIUsageDebit_Call{Call: _e.mock.On("CreateAPIUsageDebit", _a0, _a1)}
}

func (_c *DebitStoreInterface_CreateAPIUsageDebit_Call) Run(run func(_a0 *model.Workspace, _a1 *model.DebitAPI)) *DebitStoreInterface_CreateAPIUsageDebit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Workspace), args[1].(*model.DebitAPI))
	})
	return _c
}

func (_c *DebitStoreInterface_CreateAPIUsageDebit_Call) Return(_a0 error) *DebitStoreInterface_CreateAPIUsageDebit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DebitStoreInterface_CreateAPIUsageDebit_Call) RunAndReturn(run func(*model.Workspace, *model.DebitAPI) error) *DebitStoreInterface_CreateAPIUsageDebit_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDebit provides a mock function with given fields: _a0, _a1
func (_m *DebitStoreInterface) CreateDebit(_a0 *model.CallRate, _a1 *model.Debit) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.CallRate, *model.Debit) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DebitStoreInterface_CreateDebit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDebit'
type DebitStoreInterface_CreateDebit_Call struct {
	*mock.Call
}

// CreateDebit is a helper method to define mock.On call
//   - _a0 *model.CallRate
//   - _a1 *model.Debit
func (_e *DebitStoreInterface_Expecter) CreateDebit(_a0 interface{}, _a1 interface{}) *DebitStoreInterface_CreateDebit_Call {
	return &DebitStoreInterface_CreateDebit_Call{Call: _e.mock.On("CreateDebit", _a0, _a1)}
}

func (_c *DebitStoreInterface_CreateDebit_Call) Run(run func(_a0 *model.CallRate, _a1 *model.Debit)) *DebitStoreInterface_CreateDebit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.CallRate), args[1].(*model.Debit))
	})
	return _c
}

func (_c *DebitStoreInterface_CreateDebit_Call) Return(_a0 error) *DebitStoreInterface_CreateDebit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DebitStoreInterface_CreateDebit_Call) RunAndReturn(run func(*model.CallRate, *model.Debit) error) *DebitStoreInterface_CreateDebit_Call {
	_c.Call.Return(run)
	return _c
}

// NewDebitStoreInterface creates a new instance of DebitStoreInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDebitStoreInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DebitStoreInterface {
	mock := &DebitStoreInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
