// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "lineblocs.com/api/model"
)

// FaxStoreInterface is an autogenerated mock type for the FaxStoreInterface type
type FaxStoreInterface struct {
	mock.Mock
}

type FaxStoreInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *FaxStoreInterface) EXPECT() *FaxStoreInterface_Expecter {
	return &FaxStoreInterface_Expecter{mock: &_m.Mock}
}

// CreateFax provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *FaxStoreInterface) CreateFax(_a0 *model.Fax, _a1 string, _a2 int64, _a3 string, _a4 string) (int64, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Fax, string, int64, string, string) (int64, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(*model.Fax, string, int64, string, string) int64); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*model.Fax, string, int64, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FaxStoreInterface_CreateFax_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFax'
type FaxStoreInterface_CreateFax_Call struct {
	*mock.Call
}

// CreateFax is a helper method to define mock.On call
//   - _a0 *model.Fax
//   - _a1 string
//   - _a2 int64
//   - _a3 string
//   - _a4 string
func (_e *FaxStoreInterface_Expecter) CreateFax(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}) *FaxStoreInterface_CreateFax_Call {
	return &FaxStoreInterface_CreateFax_Call{Call: _e.mock.On("CreateFax", _a0, _a1, _a2, _a3, _a4)}
}

func (_c *FaxStoreInterface_CreateFax_Call) Run(run func(_a0 *model.Fax, _a1 string, _a2 int64, _a3 string, _a4 string)) *FaxStoreInterface_CreateFax_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Fax), args[1].(string), args[2].(int64), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *FaxStoreInterface_CreateFax_Call) Return(_a0 int64, _a1 error) *FaxStoreInterface_CreateFax_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FaxStoreInterface_CreateFax_Call) RunAndReturn(run func(*model.Fax, string, int64, string, string) (int64, error)) *FaxStoreInterface_CreateFax_Call {
	_c.Call.Return(run)
	return _c
}

// GetFaxCount provides a mock function with given fields: _a0
func (_m *FaxStoreInterface) GetFaxCount(_a0 int) (*int, error) {
	ret := _m.Called(_a0)

	var r0 *int
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) *int); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FaxStoreInterface_GetFaxCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFaxCount'
type FaxStoreInterface_GetFaxCount_Call struct {
	*mock.Call
}

// GetFaxCount is a helper method to define mock.On call
//   - _a0 int
func (_e *FaxStoreInterface_Expecter) GetFaxCount(_a0 interface{}) *FaxStoreInterface_GetFaxCount_Call {
	return &FaxStoreInterface_GetFaxCount_Call{Call: _e.mock.On("GetFaxCount", _a0)}
}

func (_c *FaxStoreInterface_GetFaxCount_Call) Run(run func(_a0 int)) *FaxStoreInterface_GetFaxCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *FaxStoreInterface_GetFaxCount_Call) Return(_a0 *int, _a1 error) *FaxStoreInterface_GetFaxCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FaxStoreInterface_GetFaxCount_Call) RunAndReturn(run func(int) (*int, error)) *FaxStoreInterface_GetFaxCount_Call {
	_c.Call.Return(run)
	return _c
}

// NewFaxStoreInterface creates a new instance of FaxStoreInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFaxStoreInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *FaxStoreInterface {
	mock := &FaxStoreInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
