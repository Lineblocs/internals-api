// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "lineblocs.com/api/model"
)

// LoggerStoreInterface is an autogenerated mock type for the LoggerStoreInterface type
type LoggerStoreInterface struct {
	mock.Mock
}

type LoggerStoreInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *LoggerStoreInterface) EXPECT() *LoggerStoreInterface_Expecter {
	return &LoggerStoreInterface_Expecter{mock: &_m.Mock}
}

// StartLogRoutine provides a mock function with given fields: _a0, _a1
func (_m *LoggerStoreInterface) StartLogRoutine(_a0 *model.Workspace, _a1 *model.LogRoutine) (*string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Workspace, *model.LogRoutine) (*string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*model.Workspace, *model.LogRoutine) *string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Workspace, *model.LogRoutine) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoggerStoreInterface_StartLogRoutine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartLogRoutine'
type LoggerStoreInterface_StartLogRoutine_Call struct {
	*mock.Call
}

// StartLogRoutine is a helper method to define mock.On call
//   - _a0 *model.Workspace
//   - _a1 *model.LogRoutine
func (_e *LoggerStoreInterface_Expecter) StartLogRoutine(_a0 interface{}, _a1 interface{}) *LoggerStoreInterface_StartLogRoutine_Call {
	return &LoggerStoreInterface_StartLogRoutine_Call{Call: _e.mock.On("StartLogRoutine", _a0, _a1)}
}

func (_c *LoggerStoreInterface_StartLogRoutine_Call) Run(run func(_a0 *model.Workspace, _a1 *model.LogRoutine)) *LoggerStoreInterface_StartLogRoutine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Workspace), args[1].(*model.LogRoutine))
	})
	return _c
}

func (_c *LoggerStoreInterface_StartLogRoutine_Call) Return(_a0 *string, _a1 error) *LoggerStoreInterface_StartLogRoutine_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LoggerStoreInterface_StartLogRoutine_Call) RunAndReturn(run func(*model.Workspace, *model.LogRoutine) (*string, error)) *LoggerStoreInterface_StartLogRoutine_Call {
	_c.Call.Return(run)
	return _c
}

// NewLoggerStoreInterface creates a new instance of LoggerStoreInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoggerStoreInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoggerStoreInterface {
	mock := &LoggerStoreInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
